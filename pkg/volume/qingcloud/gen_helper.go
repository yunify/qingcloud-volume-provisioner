// Copyright 2017 Yunify Inc. All rights reserved.
// Use of this source code is governed by a Apache license
// that can be found in the LICENSE file.

// +build ingore

package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"os/exec"
	"strings"
)

func main() {
	version, gitSha1Version := getAppVersion()
	buildLabel := "qingcloud-volume-provisioner-" + version

	data := make_update_version_go_file(version, gitSha1Version, buildLabel)

	err := ioutil.WriteFile("./z_update_version.go", []byte(data), 0666)
	if err != nil {
		log.Fatalf("ioutil.WriteFile: err = %v", err)
	}

	fmt.Printf("%s (%s)\n", version, gitSha1Version)
	fmt.Println(buildLabel)
}

func make_update_version_go_file(version, gitSha1Version, buildLabel string) string {
	return fmt.Sprintf(`// Copyright 2017 Yunify Inc. All rights reserved.
// Use of this source code is governed by a Apache license
// that can be found in the LICENSE file.

// Auto generated by 'go run gen_helper.go', DO NOT EDIT.

package qingcloud

func init() {
	VERSION = "%s"
	GIT_SHA1 = "%s"
	BUILD_LABEL = "%s"
}
`,
		version,
		gitSha1Version,
		buildLabel,
	)
}

func getAppVersion() (version, gitSha1Version string) {
	// VERSION=`git describe --tags --always --dirty="-dirty"`
	versionData, err := exec.Command(
		`git`, `describe`, `--tags`, `--always`, `--dirty=-dirty`,
	).CombinedOutput()
	if err != nil {
		log.Fatal(err)
	}

	// GIT_SHA1=`git show --quiet --pretty=format:%H`
	gitSha1VersionData, err := exec.Command(
		`git`, `show`, `--quiet`, `--pretty=format:%H`,
	).CombinedOutput()
	if err != nil {
		log.Fatal(err)
	}

	version = strings.TrimSpace(string(versionData))
	gitSha1Version = strings.TrimSpace(string(gitSha1VersionData))
	return
}
